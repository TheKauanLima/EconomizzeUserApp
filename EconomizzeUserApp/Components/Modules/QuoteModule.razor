@page "/orcamento"
@inject IQuoteService QuoteService
@inject IMapper Mapper
@inject SettingsService SettingsService
@inject IStreetDetailViewService StreetDetailViewService
@inject NavigationManager NavigationManager

<div class="container-fluid">
    <div class="row">
        <!-- Left Section: Create New Quote -->
        <div class="col-md-5 border-end p-4 bg-light">
            <h3 class="text-primary">Orçamentos</h3>

            <button class="btn btn-primary mb-4" @onclick="ToggleDrawer">Criar Novo Orçamento</button>

            @if (isDrawerOpen)
            {
                <div class="drawer bg-light p-4 border">
                    <button class="btn btn-secondary mb-3" @onclick="ToggleDrawer">Fechar</button>

                    <!-- Address Selection -->
                    <h5>Escolha o Endereço:</h5>
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" id="useCurrentAddress"
                               @bind="useCurrentAddress" />
                        <label class="form-check-label" for="useCurrentAddress">Usar endereço atual</label>
                    </div>

                    @if (!useCurrentAddress)
                    {
                        <button class="btn btn-info mb-3" @onclick="ToggleSearchZipCodeModule">Adicionar Novo Endereço</button>
                        @if (isSearchZipCodeVisible)
                        {
                            <SearchZipCodeModule />
                        }
                    }

                    <button class="btn btn-success mt-3" @onclick="CreateQuote" disabled="@(!CanCreateQuote)">
                        Criar Orçamento
                    </button>
                </div>
            }
        </div>

        <!-- Right Section: List of Quotes -->
        <div class="col-md-7 p-4">
            <h3 class="text-primary">Lista de Orçamentos</h3>

            @if (_quotes.Any())
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Orçamento</th>
                            <th>Status</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var quote in _quotes.Select((value, index) => new { value, index }))
                        {
                            <tr>
                                <td>Quote @(quote.index + 1)</td>
                                <td>@(quote.value.IsExpired ? "Expirado" : "Ativo")</td>
                                <td>
                                    <button class="btn btn-primary btn-sm" @onclick="() => ViewQuote(quote.value.QuoteId)">View Quote</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteQuote(quote.value.QuoteId)">Excluir</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="alert alert-info">Não existem orçamentos aqui.</div>
            }
        </div>
    </div>
</div>

@code {
    private List<QuoteModel> _quotes = new();
    private QuoteModel _newQuoteModel = new();
    private bool isDrawerOpen = false;
    private bool isSearchZipCodeVisible = false;
    private bool useCurrentAddress = false;

    #region INITIALIZATION
    protected override async Task OnInitializedAsync()
    {
        if (_quotes.Count == 0 && QuoteService.CurrentEntity is null)
        {
            QuoteService.SetListValues();
        }
        StreetDetailViewService.SetListValues();
        await LoadQuotes();
    }
    #endregion

    #region LOAD DATA
    private async Task LoadQuotes()
    {
        var quotes = await QuoteService.ReadAllAsync();
        _quotes = Mapper.Map<List<QuoteModel>>(quotes);
    }
    #endregion

    #region CREATE NEW QUOTE
    private bool CanCreateQuote => useCurrentAddress || StreetDetailViewService.CurrentEntity != null;

    private async Task CreateQuote()
    {
        if (StreetDetailViewService.CurrentEntity!.NeighborhoodId == 0) return;

        InitializeNewQuote();
        var newQuoteEntity = Mapper.Map<Quote>(_newQuoteModel);
        var createdQuote = await QuoteService.CreateAsync(newQuoteEntity);
        var quoteModel = Mapper.Map<QuoteModel>(createdQuote);

        _quotes.Add(quoteModel);
        NavigationManager.NavigateTo("/prescricao");
    }

    private void InitializeNewQuote()
    {
        var userId = SettingsService.appSettings.UserId;
        _newQuoteModel = new QuoteModel
            {
                UserId = userId,
                CreatedBy = userId,
                ModifiedBy = userId,
                CreatedOn = DateTime.Now,
                ModifiedOn = DateTime.Now,
                IsExpired = false,
                NeighborhoodId = useCurrentAddress && StreetDetailViewService.CurrentEntity != null
                    ? StreetDetailViewService.CurrentEntity.NeighborhoodId
                    : (StreetDetailViewService.CurrentEntity?.NeighborhoodId ?? 0)
            };
    }
    #endregion

    #region NAVIGATION & DELETION
    private void ViewQuote(int quoteId)
    {
        NavigationManager.NavigateTo($"/prescriptions/{quoteId}");
    }

    private async Task DeleteQuote(int quoteId)
    {
        await QuoteService.DeleteAsync(quoteId);
        await LoadQuotes();
    }
    #endregion

    #region UI TOGGLES
    private void ToggleDrawer()
    {
        isDrawerOpen = !isDrawerOpen;
        if (!isDrawerOpen)
        {
            ResetDrawerState();
        }
    }

    private void ToggleSearchZipCodeModule()
    {
        isSearchZipCodeVisible = !isSearchZipCodeVisible;
    }

    private void ResetDrawerState()
    {
        isSearchZipCodeVisible = false;
        useCurrentAddress = false;
    }
    #endregion
}

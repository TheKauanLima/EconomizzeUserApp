@page "/reset-password/{UserId:int}/{UserUniqueId:guid}"
@inject IUserLoginService UserLoginService
@inject IMapper Mapper
@inject NavigationManager NavigationManager
@inject UsernameHandler UsernameHandler

<h3 class="text-center text-primary mb-4">Reset Password</h3>

<div class="d-flex justify-content-center align-items-center">
    <div class="card p-4" style="width: 400px;">
        <EditForm Model="@changePasswordModel" OnValidSubmit="HandlePasswordReset">
            <DataAnnotationsValidator />
            <ValidationSummary class="alert alert-danger" />

            <!-- New Password -->
            <div class="form-group mb-3">
                <label for="newPassword" class="form-label">New Password</label>
                <InputText id="newPassword" @bind-Value="changePasswordModel.NewPassword" class="form-control" type="password" />
                <ValidationMessage For="@(() => changePasswordModel.NewPassword)" />
            </div>

            <!-- Confirm Password -->
            <div class="form-group mb-3">
                <label for="confirmPassword" class="form-label">Confirm Password</label>
                <InputText id="confirmPassword" @bind-Value="changePasswordModel.ConfirmPassword" class="form-control" type="password" />
                <ValidationMessage For="@(() => changePasswordModel.ConfirmPassword)" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Change Password</button>
        </EditForm>
    </div>
</div>

@if (_passwordChanged)
{
    <div class="alert alert-success mt-4 text-center">
        Password changed successfully!
    </div>
    <div class="text-center mt-2 text-muted">
        Redirecting back to login<span>@(redirectingText)</span>
    </div>
}

@code {
    [Parameter] public int UserId { get; set; }
    [Parameter] public Guid UserUniqueId { get; set; }

    private ForgotPasswordModel changePasswordModel = new();
    private bool _passwordChanged = false;
    private string redirectingText = string.Empty;

    private System.Timers.Timer? _timer;
    private int _dotCount = 0;

    protected override void OnInitialized()
    {
        // Pre-fill the UserId and UserUniqueId
        changePasswordModel.UserId = UserId;
        changePasswordModel.UserUniqueId = UserUniqueId;
        changePasswordModel.Username = UsernameHandler.Username;
    }

    private async Task HandlePasswordReset()
    {
        // Map ForgotPasswordModel to UserLogin
        var userEntity = Mapper.Map<UserLogin>(changePasswordModel);
        bool result = await UserLoginService.ChangePasswordAsync(userEntity);

        if (result)
        {
            _passwordChanged = true;

            // Start the ellipsis animation
            StartEllipsisAnimation();

            // Delay for 5 seconds before redirecting to the login page
            await Task.Delay(5000);
            NavigationManager.NavigateTo("/login");
        }
    }

    private void StartEllipsisAnimation()
    {
        _timer = new System.Timers.Timer(500);
        _timer.Elapsed += (sender, args) => UpdateEllipsis();
        _timer.Start();
    }

    private void UpdateEllipsis()
    {
        _dotCount = (_dotCount + 1) % 4; // Cycle through 0 to 3 dots
        redirectingText = new string('.', _dotCount);
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        if (_timer != null)
        {
            _timer.Stop();
            _timer.Dispose();
        }
    }
}

@page "/forgot-password"
@inject IUserLoginService UserLoginService
@inject IMapper Mapper
@inject NavigationManager NavigationManager
@inject UsernameHandler UsernameHandler

<h3 class="text-center text-primary mb-4">Forgot Password</h3>

<div class="d-flex justify-content-center align-items-center">
    <div class="card p-4" style="width: 400px;">
        <EditForm Model="@UsernameModel" OnValidSubmit="HandleForgotPassword">
            <DataAnnotationsValidator />
            <ValidationSummary class="alert alert-danger" />

            <!-- Username Input -->
            <div class="form-group mb-3">
                <label for="username" class="form-label">Enter your email</label>
                <InputText id="username" @bind-Value="UsernameModel.Username" class="form-control" placeholder="Email" />
                <ValidationMessage For="@(() => UsernameModel.Username)" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Submit</button>
        </EditForm>
    </div>
</div>

@if (!string.IsNullOrEmpty(resetLink))
{
    <div class="alert alert-success mt-4 text-center">
        <a href="@resetLink">Click here to reset your password</a>
    </div>
}

@code {
    private UsernameModel UsernameModel = new();
    private string resetLink = string.Empty;

    private async Task HandleForgotPassword()
    {
        // Find user by username
        var user = await UserLoginService.ReadAllAsync();
        var foundUser = user.FirstOrDefault(u => u.Username.Equals(UsernameModel.Username, StringComparison.OrdinalIgnoreCase));

        if (foundUser != null)
        {
            // Generate a dynamic link with UserId and UserUniqueId
            UsernameHandler.Username = foundUser.Username;
            resetLink = $"/reset-password/{foundUser.UserId}/{foundUser.UserUniqueId}";
        }
        else
        {
            resetLink = string.Empty;
        }
    }
}
